# Выполнение задания на тему "создание функций на лету" - "функциональное разнообразие":


from random import choice  # Импорт для третьей части задания.


"""------------------------------------------------------------------------------------------------------------------"""
# Задание по созданию lambda функции:

first = 'Мама мыла раму'
second = 'Рамена мало было'

coincidence_test = lambda x, y: x == y    # Поиск одинаковых букв, стоящих на одинаковой позиции в предложении.

coincidence_list = list(map(coincidence_test, first, second))
print(coincidence_list)


"""------------------------------------------------------------------------------------------------------------------"""
# Задание по созданию функкции с настройками, заданными создающей функцией:
def get_advanced_writer(file_name):  # Функция "преднастройки" подфункции.

    def write_everything(*data_set):  # "Подфункция", записывающая всё в текстовый файл с названием из функции.

        file = open(file_name, 'w', encoding='utf-8')

        for item in data_set:
            file.write(str(item) + '\n')
        file.close()

    return write_everything  # Создание функции с параметром filename, уникальным для каждого экземпляра функции.


# Проверочные данные для второго задания:
write = get_advanced_writer('example.txt')
write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])


"""------------------------------------------------------------------------------------------------------------------"""
# Задание по созданию класса с внутренними функциями, которые можно вызывать:
class MysticBall:

    def __init__(self, *answers): # "Преднастройка" внутренних данных экземпляра класса с вызываемыми извне функциями.

        self.words = []

        for answer in answers:      # Запись всех ответов, которые может выдвать класс "мистический шар".
            self.words.append(answer)

    def __call__(self, *args, **kwargs):

        return choice(self.words)  # Выдача случайного ответа из списка, находящегося внутри экземпляра класса.

# Проверочные данные для третьего задания:
first_ball = MysticBall('Да', 'Нет', 'Наверное')
print(first_ball())
print(first_ball())
print(first_ball())